geom_density(adjust = 1L, alpha = 0.5) +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(data_trial) +
aes(x = Age) +
geom_density(adjust = 1L, fill = "pink") +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(data_trial) +
aes(x = Class, fill = Class) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()
set.seed(80)
data_trial$Sex <- as.integer(data_trial$Sex)
data_trial$Class <- as.integer(data_trial$Class)
#Decide on the strength of influence of sex on survivability
b_sex = -0.23
#Decide on the strength of influence of class on survivability
b_class = -0.15
#Decide on the strength of influence of Age on survivability
b_age_group = -0.03
#Create linear regression of mean survivability
mu = 0.75 + b_sex*data_trial$Sex + b_class*data_trial$Class + b_age_group*data_trial$Age_group #We assume surviability is 0.75 when
#Sex = 0, class = 1, Age = 0
#Simulate survivability
survivability <- rnorm(N, mu, 0.08)
#Put into tibble
data_trial$Survivability <- survivability
# Apply logistic function to squash survivability values into range [0, 1]
logistic_transform <- function(x) {
1 / (1 + exp(-x))
}
# Apply logistic transformation to survivability
transformed_survivability <- logistic_transform(survivability)
#Check
#hist(transformed_survivability)
#Put into tibble
data_trial$Survivability <- transformed_survivability
data_trial$Age_group <- cut(data_trial$Age, breaks = seq(0, 80, by = 10))
data_trial$Age_group <- ifelse(data_trial$Age_group == "(0,10]", 1, data_trial$Age_group)
data_trial$Survived <- ifelse(data_trial$Survivability<=0.5, 0, 1)
# Plot the survival rate by age group
ggplot(data_trial, aes(x = Age_group, fill = factor(Survived))) +
geom_bar(position = "fill") +
labs(title = "Survival rate by age group", x = "Age group", y = "Count") +
scale_fill_discrete(name = "Survived")
set.seed(80)
data_trial$Sex <- as.integer(data_trial$Sex)
data_trial$Class <- as.integer(data_trial$Class)
#Decide on the strength of influence of sex on survivability
b_sex = -0.23
#Decide on the strength of influence of class on survivability
b_class = -0.15
#Decide on the strength of influence of Age on survivability
b_age_group = -0.03
#Create linear regression of mean survivability
mu = 0.75 + b_sex*data_trial$Sex + b_class*data_trial$Class + b_age_group*data_trial$Age_group #We assume surviability is 0.75 when
#Sex = 0, class = 1, Age = 0
#Simulate survivability
survivability <- rnorm(N, mu, 0.08)
#Put into tibble
data_trial$Survivability <- survivability
# Apply logistic function to squash survivability values into range [0, 1]
logistic_transform <- function(x) {
1 / (1 + exp(-x))
}
# Apply logistic transformation to survivability
transformed_survivability <- logistic_transform(survivability)
#Check
#hist(transformed_survivability)
#Put into tibble
data_trial$Survivability <- transformed_survivability
data_trial$Age_group <- cut(data_trial$Age, breaks = seq(0, 80, by = 10))
data_trial$Age_group <- ifelse(data_trial$Age_group == "(0,10]", 1, data_trial$Age_group)
data_trial$Survived <- ifelse(data_trial$Survivability<=0.5, 0, 1)
# Plot the survival rate by age group
ggplot(data_trial, aes(x = Age_group, fill = factor(Survived))) +
geom_bar(position = "fill") +
labs(title = "Survival rate by age group", x = "Age group", y = "Count") +
scale_fill_discrete(name = "Survived")
#Plot the survival rate by passenger class in percentage of class
ggplot(data_trial, aes(x = Class, fill = factor(Survived))) +
geom_bar(position = "fill") +
labs(title = "Survival rate by passenger class", x = "Passenger class", y = "Count") +
scale_fill_discrete(name = "Survived")
# Plot the survival rate by sex
ggplot(data_trial, aes(x = Sex, fill = factor(Survived))) +
geom_bar(position = "fill") +
labs(title = "Survival rate by Sex", x = "Sex", y = "Count") +
scale_fill_discrete(name = "Survived")
library(cmdstanr)
library(rethinking)
data_trial$Passenger <- 1:1000
data_trial$Passenger <- as.integer(data_trial$Passenger)
data_trial$Survived <- as.integer(data_trial$Survived)
data_trial$Age_group <- as.factor(data_trial$Age_group) #Stan is a little diva and requires integers otherwise she gets pissed.maybe?
data_trial <- data_trial[data_trial$Age != 0, ] #Stan is also a diva that flips over a few 0's
# prior trimmed data list
dat_list <- list(
Sex = data_trial$Sex
)
# It runs for class
m.1 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Class] + bs[Sex],
ba[Age_group] ~ dnorm(-0.03, 0.2),
b[Class] ~ dnorm(-0.15, 0.5),
bs[Sex] ~ dnorm(-0.23, 0.5 )
) , data=data_trial , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.1 , depth=2 )
# MCMC go brrrrrrrr
set.seed(69)
prior <- extract.prior(m.1, n=1e4)
p <- inv_logit(prior$ba)
dens(p)
p1 <- inv_logit(prior$b)
dens(p1)
p2 <- inv_logit(prior$bs)
dens(p2)
# See code box 11.4, 11.5 and 11.6 on how to do this.
impliedConditionalIndependencies(dag)
#Prepare data:
data <- df[c("Age", "Sex", "Survived", "Pclass")]
data$Sex <- ifelse(data$Sex=="female", 0,1)
data$Sex <- as.integer(data$Sex)
data$Age <- as.integer(data$Age)
data$Age <- ifelse(data$Age == 0, 1, data$Age)
data$Age_group <- cut(data$Age, breaks = seq(0, 80, by = 10))
data$Age_group <- ifelse(data$Age_group == "(0,10]", 1, data$Age_group)
data$Age_group <- as.factor(data$Age_group)
data <- data[c("Sex", "Survived", "Pclass", "Age_group")]
data_list <- list(Sex=data$Sex, Age_group=data$Age_group, Pclass=data$Pclass, Survived=data$Survived, Sex1=data$Sex)
m.2 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass], #bs[Sex1],
ba[Age_group] ~ dnorm(-0.03, 0.2),
b[Pclass] ~ dnorm(-0.15, 0.5)
#bs[Sex1] ~ dnorm(-0.23, 0.5 )
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.2 , depth=2 )
# Re-use your models from above, just use real data instead of simulated. :))
m.2 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass], #bs[Sex1],
ba[Age_group] ~ dnorm(-0.03, 0.2),
b[Pclass] ~ dnorm(-0.15, 0.5)
#bs[Sex1] ~ dnorm(-0.23, 0.5 )
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.2 , depth=2 )
# Re-use your models from above, just use real data instead of simulated. :))
m.3 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(0, 10),
b[Pclass] ~ dnorm(0, 10)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
m.4 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(-0.03, 0.005),
b[Pclass] ~ dnorm(-0.15, 0.05)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.2 , depth=2 )
precis( m.3 , depth=2 )
precis( m.4 , depth=2 )
compare(m.2, m.3, m.4, func = WAIC)
# Make 2-3 copies of your model with different priors, compare them.
?compare()
m.3 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
m.4 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(-0.03, 0.005),
b[Pclass] ~ dnorm(-0.15, 0.05)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.2 , depth=2 )
precis( m.3 , depth=2 )
precis( m.4 , depth=2 )
compare(m.2, m.3, m.4, func = WAIC)
# Make 2-3 copies of your model with different priors, compare them.
df$interaction <- 1 +  (as.numeric(df$Sex)) + 2 * (as.numeric(df$Pclass) - 1)
View(df)
View(data_trial)
View(data)
data$interaction <- 1 +  (as.numeric(df$Sex)) + 2 * (as.numeric(df$Pclass) - 1)
data$interaction <- 1 +  (as.numeric(data$Sex)) + 2 * (as.numeric(data$Pclass) - 1)
m.5 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass] + bi[interaction],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5),
bi[interaction] ~ dnorm(0,0.5)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
data$interaction_SC <- 1 +  (as.numeric(data$Sex)) + 2 * (as.numeric(data$Pclass) - 1)
m.5 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass] + bi[interaction_SC],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5),
bi[interaction_SC] ~ dnorm(0,0.5)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
m.5 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass] + bi[interaction_SC],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5),
bi[interaction_SC] ~ dnorm(0,0.5)
) , data=data , chains=4 , cores = 4,  log_lik=TRUE )
precis( m.5 , depth=2 )
compare(m.3, m.5, func=WAIC)
# See code box 11.31
postcheck( m.5, window= 40, n=100)
# See code box 11.31
postcheck( m.5, window= 80)
# Generate posterior predictive samples
pp_samples <- extract.samples(m.5)
# Simulate data from the posterior predictive distribution
simulated_data <- sim(m.5, nsim = 1000)
# Compare simulated data to observed data
observed_data <- df$Survived  # Load or prepare your observed data here
# Calculate metrics for comparison (e.g., mean squared error)
mse <- mean((simulated_data - observed_data)^2)
# Visual inspection (e.g., plotting simulated vs observed data)
plot(simulated_data, observed_data, xlab = "Simulated", ylab = "Observed", main = "Posterior Predictive Check")
# Simulate data from the posterior predictive distribution
simulated_data <- sim(m.5, nsim = 714)
# Visual inspection (e.g., plotting simulated vs observed data)
plot(simulated_data, observed_data, xlab = "Simulated", ylab = "Observed", main = "Posterior Predictive Check")
View(simulated_data)
# See code box 11.31
postcheck( m.5, window= 80)
for (i in 1:i) {
x <- 1 + 2*(i-1)
y1 <- d$admit[x] / d$applications[x]
y2 <- d$admit[x+1] / d$applications[x+1]
# Determine the color based on the prediction value
if (y1 > 0.5 && y2 > 0.5) {
col_line <- "green"  # Both predictions are above 0.5
} else if (y1 <= 0.5 && y2 <= 0.5) {
col_line <- "red"  # Both predictions are below or equal to 0.5
} else {
col_line <- "orange"  # One prediction is above 0.5 and the other is below
}
lines(c(x, x+1), c(y1, y2), col = col_line, lwd = 2)
text(x + 0.5, (y1 + y2) / 2 + 0.05, d$dept[x], cex = 0.8, col = col_line)
}
mu <- link( m5.3 )
mu <- link( m.5 )
# summarize samples across cases
mu_mean <- apply( mu , 2 , mean )
mu_PI <- apply( mu , 2 , PI )
# simulate observations again no new data, so uses original data
D_sim <- sim( m5.3 , n=1e4 )
# simulate observations again no new data, so uses original data
D_sim <- sim( m.5 , n=1e4 )
D_PI <- apply( D_sim , 2 , PI )
plot( mu_mean ~ data$Survived , col=rangi2 , ylim=range(mu_PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 ) #Perfect prediction
for ( i in 1:nrow(d) ) lines( rep(d$D[i],2) , mu_PI[,i] , col=rangi2 )
plot( mu_mean ~ data$Survived , col=rangi2 , ylim=range(mu_PI) ,
xlab="Observed divorce" , ylab="Predicted divorce" )
abline( a=0 , b=1 , lty=2 ) #Perfect prediction
for ( i in 1:nrow(data) ) lines( rep(data$Survived[i],2) , mu_PI[,i] , col=rangi2 )
# See code box 11.31
postcheck( m.5, window= 90)
link(m.5)
post <- link(m.5, data=data)
mu <- apply(post, 2, mean) # Compute the mean of all columns in the post
mu <- ifelse(mu >= 0.5, 1, 0) #If we predict a survivability of 0,5 or more they survive otherwise they die
data$mu <- mu
data$mu <- as.factor(mu)
data$Survived <- as.factor(data$Survived)
# All you need is link(your_model), you can figure out the rest yourself.
library(caret)
conf_matrix <- confusionMatrix(data$Survived, data$mu)
conf_matrix <- as.data.frame(conf_matrix$table)
View(conf_matrix)
ggplot(conf_matrix, aes(x=Prediction, y= Reference, fill = Freq))+
geom_tile()
ggplot(conf_matrix, aes(x=Prediction, y= Reference, fill = Freq))+
geom_tile()+
scale_fill_gradient(low= "red", high="green")
ggplot(conf_matrix, aes(x=Prediction, y= Reference, fill = Freq))+
geom_tile()+
scale_fill_gradient(low= "#fee59a", high="#c32148")
ggplot(conf_matrix, aes(x=Prediction, y= Reference, fill = Freq))+
geom_tile()+
scale_fill_gradient(low= "white", high="#c32148")
ggplot(conf_matrix, aes(x=Prediction, y= Reference, fill = Freq))+
geom_tile()+
scale_fill_gradient(low= "white", high="#c32148")+
geom_text(aes(label=Freq), vjust = 1)
precis(m.5)
precis(m.5, depth=2)
plot(coeftab(m.5, m.3), par=c("ba[Age_group]" , "b[Pclass]", "bi[interaction_SC]"))
plot(coeftab(m.5, m.3), par=c("ba[Age_group]" , "b[Pclass]"))
m.3 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5)
) , data=data, chains=4 , cores = 4,  log_lik=TRUE )
m.3 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5)
) , data=data_list, chains=4 , cores = 4,  log_lik=TRUE )
data_list$interaction_SC <- data$interaction_SC
m.5 <- ulam(
alist(
Survived ~ dbinom( 1 , p ) ,
logit(p) <- ba[Age_group] + b[Pclass] + bi[interaction_SC],
ba[Age_group] ~ dnorm(0, 0.5),
b[Pclass] ~ dnorm(0, 0.5),
bi[interaction_SC] ~ dnorm(0,0.5)
) , data=data_list , chains=4 , cores = 4,  log_lik=TRUE )
plot(coeftab(m.5, m.3), par=c("ba[Age_group]" , "b[Pclass]", "bi[interaction_SC]"))
plot(coeftab(m.5), par=c("ba[Age_group]" , "b[Pclass]", "bi[interaction_SC]"))
plot(coeftab(m.5))
plot(coeftab(m.5), height = 10))
plot(coeftab(m.5), height = 10)
plot(coeftab(m.5), height = 100)
plot(coeftab(m.5), par= ("ba[1]"))
plot(coeftab(m.5), par= ("ba[]"))
plot(coeftab(m.5), par= ("ba[Age_group]"))
plot(coeftab(m.5), par= ("ba[1]", "ba[2]", "ba[3]", "ba[4]", "ba[5]", "ba[6]", "ba[7]", "ba[8]"))
plot(coeftab(m.5), par= c("ba[1]", "ba[2]", "ba[3]", "ba[4]", "ba[5]", "ba[6]", "ba[7]", "ba[8]"))
plot(coeftab(m.5), par= c("b[1]", "b[2]", "b[3]"))
plot(coeftab(m.5), par= c("bi[1]", "bi[2]", "bi[3]", "bi[4]", "bi[5]", "bi[6]"))
plot(coeftab(m.5), par= c("ba[1]", "ba[2]", "ba[3]", "ba[4]", "ba[5]", "ba[6]", "ba[7]", "ba[8]"))
plot(coeftab(m.5), par= c("b[1]", "b[2]", "b[3]"))
plot(coeftab(m.5), par= c("bi[1]", "bi[2]", "bi[3]", "bi[4]", "bi[5]", "bi[6]"))
setwd("~/Documents/GitHub/SocCult-exam")
knitr::opts_chunk$set(echo = TRUE)
# Load packages
library(brms)
library(tidyverse)
library(ggplot2)
library(rethinking)
cashbenefit <- read.csv("long_cashbenefit_2205.csv")
cashbonus <- read.csv("long_cashbonus_2205.csv")
baseline <- read.csv("data_wo_bonus_2205.csv")
real_data <- read.csv("~/Desktop/Lyfe/Uni/SocCult/Population1.csv")
#Make a column with condition
cashbenefit$condition <- 2
cashbonus$condition <- 1
baseline$condition <- 0
#Merge the data frames so we can use it to model
df_combined <- rbind(cashbenefit, cashbonus, baseline)
cashbenefit <- read.csv("long_cashbenefit_2205.csv")
cashbonus <- read.csv("long_cashbonus_2205.csv")
baseline <- read.csv("long_baseline_2205.csv")
real_data <- read.csv("~/Desktop/Lyfe/Uni/SocCult/Population1.csv")
#Merge the data frames so we can use it to model
df_combined <- rbind(cashbenefit, cashbonus, baseline)
View(baseline)
View(baseline)
# Create a scatterplot of age vs. gender for survivors
ggplot(baseline, aes(x = Age_group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
# Create a scatterplot of age vs. gender for survivors
ggplot(baseline, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(cashbenefit, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
# Create a scatterplot of age vs. gender for survivors
ggplot(baseline, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(cashbenefit, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(cashbonus, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Class by gender",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = socio_economic_class) +
geom_density(adjust = 1L, alpha = 0.5) +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = socio_economic_class) +
geom_density(adjust = 1L, alpha = 0.5) +
# scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = condition) +
geom_density(adjust = 1L, alpha = 0.5) +
# scale_fill_hue(direction = 1) +
theme_minimal()
```{r}
#Make a column with condition
cashbenefit$condition <- 2
cashbonus$condition <- 1
baseline$condition <- 0
#Merge the data frames so we can use it to model
df_combined <- rbind(cashbenefit, cashbonus, baseline)
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = condition) +
geom_density(adjust = 1L, alpha = 0.5) +
# scale_fill_hue(direction = 1) +
theme_minimal()
df_combined$condition <- as.factor(df_combined$condition)
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = condition) +
geom_density(adjust = 1L, alpha = 0.5) +
# scale_fill_hue(direction = 1) +
theme_minimal()
df_combined$socio_economic_class <- as.factor(df_combined$socio_economic_class)
df_combined$Age_Group <- as.factor(df_combined$Age_Group)
# Create a scatterplot of age vs. gender for survivors
ggplot(baseline, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Age by Class",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(cashbenefit, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Age by Class",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(cashbonus, aes(x = Age_Group, y = socio_economic_class, color = socio_economic_class)) +
geom_jitter() +
labs(title = "Age by Class",
x = "Age_group",
y = "socio_economic_class",
color = "socio_economic_class") +
theme_minimal()
ggplot(df_combined) +
aes(x = Age_Group, fill = socio_economic_class, group = condition) +
geom_density(adjust = 1L, alpha = 0.5) +
# scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(df_combined) +
aes(x = socio_economic_class, fill = condition) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()
library(readr)
Fertility_clean_fixed <- read_csv("Fertility_clean_fixed.csv")
View(Fertility_clean_fixed)
ggplot(Fertility_clean_fixed) +
aes(x = socio_economic_class, fill = condition) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(Fertility_clean_fixed) +
aes(x = class, fill = condition) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(Fertility_clean_fixed) +
aes(x = econ_score, fill = condition) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()
ggplot(Fertility_clean_fixed) +
aes(x = econ_score, fill = econ_score) +
geom_bar() +
scale_fill_hue(direction = 1) +
theme_minimal()

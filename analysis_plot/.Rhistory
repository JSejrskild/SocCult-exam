# Split dataframe by Dataset
split_dfs <- split(df, df$Dataset)
# Access each split by name
Split_baseline <- split_dfs[["baseline"]]
Split_cashbenefit <- split_dfs[["cashbenefit"]]  # Corrected typo from "cashbeneft"
Split_cashbonus <- split_dfs[["cashbonus"]]      # Corrected variable name
SE1a$socio_economic_class <- as.factor(SE1a$socio_economic_class)
SE2a$socio_economic_class <- as.factor(SE2a$socio_economic_class)
SE3a$socio_economic_class <- as.factor(SE3a$socio_economic_class)
# Perform ANOVA for each socio-economic class
aov_result1a <- aov(age_first_child_numeric ~ socio_economic_class, data = SE1a)
# Convert Dataset column to factor
df$Dataset <- as.factor(df$Dataset)
# Split dataframe by Dataset
split_dfs <- split(df, df$Dataset)
# Access each split by name
Split_baseline <- split_dfs[["baseline"]]
Split_cashbenefit <- split_dfs[["cashbenefit"]]  # Corrected typo from "cashbeneft"
Split_cashbonus <- split_dfs[["cashbonus"]]      # Corrected variable name
Split_baseline$socio_economic_class <- as.factor(Split_baseline$socio_economic_class)
Split_cashbenefit$socio_economic_class <- as.factor(Split_cashbenefit$socio_economic_class)
Split_cashbonus$socio_economic_class <- as.factor(Split_cashbonus$socio_economic_class)
# Perform ANOVA for each socio-economic class
aov_result1a <- aov(age_first_child_numeric ~ socio_economic_class, data = SE1a)
# Convert Dataset column to factor
df$Dataset <- as.factor(df$Dataset)
# Split dataframe by Dataset
split_dfs <- split(df, df$Dataset)
# Access each split by name
Split_baseline <- split_dfs[["baseline"]]
Split_cashbenefit <- split_dfs[["cashbenefit"]]  # Corrected typo from "cashbeneft"
Split_cashbonus <- split_dfs[["cashbonus"]]      # Corrected variable name
Split_baseline$socio_economic_class <- as.factor(Split_baseline$socio_economic_class)
Split_cashbenefit$socio_economic_class <- as.factor(Split_cashbenefit$socio_economic_class)
Split_cashbonus$socio_economic_class <- as.factor(Split_cashbonus$socio_economic_class)
# Perform ANOVA for each socio-economic class
aov_result_baseline <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_baseline)
summary(aov_result_baseline)
aov_result_benefit <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_cashbenefit)
summary(aov_result_benefit)
aov_result_bonus <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_cashbonus)
summary(aov_result_bonus)
tukey_result_basline <- TukeyHSD(aov_result_baseline)
print(tukey_result_basline)
tukey_result_benefit <- TukeyHSD(aov_result_benefit)
print(tukey_result_benefit)
tukey_result_bonus <- TukeyHSD(aov_result_bonus)
print(tukey_result_bonus)
# Calculate the mean age of the first child grouped by socio-economic class
mean_age_first_child <- aggregate(age_first_child_numeric ~ socio_economic_class + Dataset, data = df, FUN = mean)
# Convert numerical values back to age bin names
mean_age_first_child$age_first_child <- age_bins[mean_age_first_child$age_first_child_numeric]
# View the resulting data frame
print(mean_age_first_child)
summary(mean(SE1$age_first_child_numeric))
mean(SE1$age_first_child_numeric))
mean(SE1$age_first_child_numeric)
# How does the mean age vary in each socio-economic as a result of conditions/interventions
df <- na.omit(df)
# How does the mean age vary in each socio-economic as a result of conditions/interventions
df <- na.omit(df)
split_dfs <- split(df, df$socio_economic_class)
SE1 <- split_dfs[[1]]
SE2 <- split_dfs[[2]]
SE3 <- split_dfs[[3]]
mean(SE1$age_first_child_numeric)
# Perform ANOVA for each socio-economic class
aov_resultSE1 <- aov(age_first_child_numeric ~ Dataset, data = SE1)
summary(aov_resultSE1)
aov_resultSE2 <- aov(age_first_child_numeric ~ Dataset, data = SE2)
summary(aov_resultSE2)
aov_resultSE3 <- aov(age_first_child_numeric ~ Dataset, data = SE3)
summary(aov_resultSE3)
tukey_result1 <- TukeyHSD(aov_resultSE2)
print(tukey_result1)
tukey_result2 <- TukeyHSD(aov_resultSE3)
print(tukey_result2)
# Convert Dataset column to factor
df$Dataset <- as.factor(df$Dataset)
# Split dataframe by Dataset
split_dfs <- split(df, df$Dataset)
# Access each split by name
Split_baseline <- split_dfs[["baseline"]]
Split_cashbenefit <- split_dfs[["cashbenefit"]]  # Corrected typo from "cashbeneft"
Split_cashbonus <- split_dfs[["cashbonus"]]      # Corrected variable name
Split_baseline$socio_economic_class <- as.factor(Split_baseline$socio_economic_class)
Split_cashbenefit$socio_economic_class <- as.factor(Split_cashbenefit$socio_economic_class)
Split_cashbonus$socio_economic_class <- as.factor(Split_cashbonus$socio_economic_class)
# Perform ANOVA for each socio-economic class
aov_result_baseline <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_baseline)
summary(aov_result_baseline)
aov_result_benefit <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_cashbenefit)
summary(aov_result_benefit)
aov_result_bonus <- aov(age_first_child_numeric ~ socio_economic_class, data = Split_cashbonus)
summary(aov_result_bonus)
tukey_result_basline <- TukeyHSD(aov_result_baseline)
print(tukey_result_basline)
tukey_result_benefit <- TukeyHSD(aov_result_benefit)
print(tukey_result_benefit)
tukey_result_bonus <- TukeyHSD(aov_result_bonus)
print(tukey_result_bonus)
data <- read.csv("data/combined_data_to_glm.csv")
data <- read.csv("../data/combined_data_to_glm.csv")
# Change the data type of the variables
data$socio_economic_class <- as.factor(data$socio_economic_class)
data$Dataset <- as.factor(data$Dataset)
View(data)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
baseline <- read.csv("../data/data_wo_bonus_2205.csv")
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
baseline <- read.csv("../data/data_wo_bonus_2205.csv")
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
data <- read.csv("../data/combined_data_to_glm.csv")
data <- read.csv("../data/combined_data_to_glm.csv")
library(arm)
library(arm)
library(arm)
library(arm)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
library(jtools)
library(tidyr)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
library(broom.mixed)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
data <- read.csv("../data/combined_data_to_glm.csv")
data <- read.csv("../data/combined_data_to_glm.csv")
data <- read.csv("../data/combined_data_to_glm.csv")
data <- read.csv("../data/combined_data_to_glm.csv")
getwd()
setwd("/Users/mattie/Desktop/SocCult-exam")
getwd()
data <- read.csv("../data/combined_data_to_glm.csv")
data <- read.csv("data/combined_data_to_glm.csv")
library(readr)
write_csv(df, "C:\\Users\\mattie\\Desktop\\H2_analysis_df.csv")
write_csv(df, "C:\\Users\\mattie\\Desktop\\SoCult-exam\\data\\H2_analysis_df.csv")
write.csv(df, "C:\\Users\\mattie\\Desktop\\SoCult-exam\\data\\H2_analysis_df.csv", row.names=FALSE)
write.csv(df, "H2_analysis_df.csv", row.names=FALSE)
df$age_first_child <- as.charcter(df$age_first_child)
df$age_first_child <- as.character(df$age_first_child)
df$age_first_child <- as.factor(df$age_first_child)
print(class(df))
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
baseline <- read.csv("../data/data_wo_bonus_2205.csv")
bonus <- read.csv("../data/data_w_cashbonus_2205.csv")
benefit <- read.csv("../data/data_w_cashbenefit_2205.csv")
#Combine datasets
benefit$Dataset <- 'cashbenefit'
bonus$Dataset <- 'cashbonus'
baseline$Dataset <- 'baseline'
df <- rbind(benefit, bonus, baseline)
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
# Create the function to find the first age bin with a number greater than 0
find_first_age_bin <- function(row) {
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
for (age_bin in age_bins) {
if (row[[age_bin]] > 0) {
return(age_bin)  # Return the age bin if the value is greater than 0
}
}
return(0)  # Return 0 if no age bin has a number greater than 0
}
# Apply the function to each row and create a new column 'age_first_child'
df$age_first_child <- apply(df[, c("1519", "2024", "2529", "3034", "3539", "4044", "4549")], 1, find_first_age_bin)
# View the resulting data frame
print(df)
# Save the resulting data frame to a CSV file
write.csv(df, "output.csv", row.names = FALSE)
# Save the resulting data frame to a CSV file
write.csv(df, "H2_df.csv", row.names = FALSE)
# Save the resulting data frame to a CSV file
write.csv(df, "Users/mattie/Desktop/SocCult-exam/data/H2_df.csv", row.names = FALSE)
# Save the resulting data frame to a CSV file
write.csv(df, "://Users/mattie/Desktop/SocCult-exam/data/H2_df.csv", row.names = FALSE)
# Save the resulting data frame to a CSV file
write.csv(df, ":\\Users\\mattie\\Desktop\\SocCult-exam\\data\\H2_df.csv", row.names = FALSE)
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
baseline <- read.csv("../data/data_wo_bonus_2205.csv")
bonus <- read.csv("../data/data_w_cashbonus_2205.csv")
benefit <- read.csv("../data/data_w_cashbenefit_2205.csv")
#Combine datasets
benefit$Dataset <- 'cashbenefit'
bonus$Dataset <- 'cashbonus'
baseline$Dataset <- 'baseline'
df <- rbind(benefit, bonus, baseline)
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
# Create the function to find the first age bin with a number greater than 0
find_first_age_bin <- function(row) {
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
for (age_bin in age_bins) {
if (row[[age_bin]] > 0) {
return(age_bin)  # Return the age bin if the value is greater than 0
}
}
return(0)  # Return 0 if no age bin has a number greater than 0
}
# Apply the function to each row and create a new column 'age_first_child'
df$age_first_child <- apply(df[, c("1519", "2024", "2529", "3034", "3539", "4044", "4549")], 1, find_first_age_bin)
# View the resulting data frame
print(df)
# Save the resulting data frame to a CSV file
write.csv(df, ":\\Users\\mattie\\Desktop\\SocCult-exam\\data\\H2_df.csv", row.names = FALSE)
# Define numerical values for each age bin
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
age_values <- c(17, 22, 27, 32, 37, 42, 47)
# Replace age bin names with numerical values e.g. 1519 is age bin 1
df$age_first_child_numeric <- match(df$age_first_child, age_bins)
# Calculate the mean age of the first child grouped by socio-economic class
mean_age_first_child <- aggregate(age_first_child_numeric ~ socio_economic_class + Dataset, data = df, FUN = mean)
# Convert numerical values back to age bin names
mean_age_first_child$age_first_child <- age_bins[mean_age_first_child$age_first_child_numeric]
# View the resulting data frame
print(mean_age_first_child)
# Save the resulting data frame to a CSV file
write.csv(df, ":\\Users\\mattie\\Desktop\\SocCult-exam\\data\\H2_df.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
setwd("/Users/mattie/Desktop/SocCult-exam")
getwd()
data <- read.csv("data/H2_LM_analysis.csv")
data <- read.csv("../data/H2_LM_analysis.csv")
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
setwd("/Users/mattie/Desktop/SocCult-exam")
getwd()
data <- read.csv("data/H2_LM_analysis.csv")
data <- read.csv("data/H2_df.csv")
# Change the data type of the variables
data$socio_economic_class <- as.factor(data$socio_economic_class)
data$Dataset <- as.factor(data$Dataset)
data <- read.csv("data/H2_df.csv")
# Change the data type of the variables
data$socio_economic_class <- as.factor(data$socio_economic_class)
data$Dataset <- as.factor(data$Dataset)
View(data)
data <- read.csv("data/H2_df.csv")
# Change the data type of the variables
data$socio_economic_class <- as.factor(data$socio_economic_class)
data$Dataset <- as.factor(data$Dataset)
# data wrangling
# Define numerical values for each age bin
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
age_values <- c(17, 22, 27, 32, 37, 42, 47)
# Replace age bin names with numerical values e.g. 1519 is age bin 1
df$age_first_child_numeric <- match(df$age_first_child, age_bins)
data <- read.csv("data/H2_df.csv")
# Change the data type of the variables
data$socio_economic_class <- as.factor(data$socio_economic_class)
data$Dataset <- as.factor(data$Dataset)
# data wrangling
# Define numerical values for each age bin
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
age_values <- c(17, 22, 27, 32, 37, 42, 47)
# Replace age bin names with numerical values e.g. 1519 is age bin 1
data$age_first_child_numeric <- match(data$age_first_child, age_bins)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages
library(dplyr)
library(ggplot2)
library(car)
library(tidyr)
getwd()
setwd("/Users/mattie/Desktop/SocCult-exam")
getwd()
# Data wrangling
# Define numerical values for each age bin
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
age_values <- c(17, 22, 27, 32, 37, 42, 47)
# Replace age bin names with numerical values e.g. 1519 is age bin 1
data$age_first_child_numeric <- match(data$age_first_child, age_bins)
head(data)
hist(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,26
var(data$age_first_child_numeric) #Variance 1,37
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
head(data)
hist(data$age_first_child_numeric)
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,26
var(data$age_first_child_numeric) #Variance 1,37
# Data wrangling
# Redefine agebins
data <- data %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X1519`,
"2024" = `X2024`,
"2529" = `X2529`,
"3034" = `X3034`,
"3539" = `X3539`,
"4044" = `X4044`,
"4549" = `X4549`)
# rename age bins for ease of handling
df <- df %>%
rename(
"1519" = `X1519`,
"2024" = `X2024`,
"2529" = `X2529`,
"3034" = `X3034`,
"3539" = `X3539`,
"4044" = `X4044`,
"4549" = `X4549`)
# Data wrangling
# Redefine agebins
data <- data %>%
rename(
"1519" = `X15.19`,
"2024" = `X20.24`,
"2529" = `X25.29`,
"3034" = `X30.34`,
"3539" = `X35.39`,
"4044" = `X40.44`,
"4549" = `X45.49`)
# Data wrangling
# Redefine agebins
data <- data %>%
rename(
"1519" = `X1519`,
"2024" = `X2024`,
"2529" = `X2529`,
"3034" = `X3034`,
"3539" = `X3539`,
"4044" = `X4044`,
"4549" = `X4549`)
# Define numerical values for each age bin
age_bins <- c("1519", "2024", "2529", "3034", "3539", "4044", "4549")
age_values <- c(17, 22, 27, 32, 37, 42, 47)
# Replace age bin names with numerical values e.g. 1519 is age bin 1
data$age_first_child_numeric <- match(data$age_first_child, age_bins)
head(data)
hist(data$age_first_child_numeric)
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,26
var(data$age_first_child_numeric) #Variance 1,37
head(data)
hist(data$age_first_child_numeric)
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,26
var(data$age_first_child_numeric) #Variance 1,37
class(data$age_first_child_numeric)
data <- na.omit(data)
head(data)
data <- na.omit(data)
hist(data$age_first_child_numeric)
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
class(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,26
var(data$age_first_child_numeric) #Variance 1,37
hist(data$age_first_child_numeric)
data$RowNumber <- seq_len(nrow(data))
# Inspect the data
head(data)
data <- na.omit(data)
data$RowNumber <- seq_len(nrow(data))
data$age_first_child_numeric <- as.numeric(data$age_first_child_numeric)
hist(data$age_first_child_numeric)
mean(data$age_first_child_numeric) #Mean 2,998
var(data$age_first_child_numeric) #Variance 0.846
data$ID <- seq_len(nrow(data))
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary_model1 <- summary(model1)
# Model 2
model2 <- lmer(age_first_child_numeric ~ socio_economic_class + Dataset + (1 | ID), data = data)
library(lme4)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary_model1 <- summary(model1)
# Model 2
model2 <- lmer(age_first_child_numeric ~ socio_economic_class + Dataset + (1 | ID), data = data)
# Model 2
model2 <- lmer(age_first_child_numeric ~ socio_economic_class + Dataset + (ID | 1), data = data)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary_model1 <- summary(model1)
# Model 2
model2 <- lmer(age_first_child_numeric ~ socio_economic_class + Dataset + socio_economic_class:Dataset , data = data)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary_model1 <- summary(model1)
# Model 2
model2 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset + socio_economic_class:Dataset , data = data)
summary_model1 <- summary(model2)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary(model1)
# Model 2
model2 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset + socio_economic_class:Dataset , data = data)
summary(model2)
# Model 1
model1 <- glm(Children ~ socio_economic_class + Dataset, data = data, family = poisson(link = "log"))
summary_model1 <- summary(model1)
#Model 2
model2 <- glm(Children ~ socio_economic_class + Dataset , data = data, family = quasipoisson(link = "log"))
summary(model2)
library(flexmix)
install.packages(flexmix)
install.packages("flexmix")
library(flexmix)
bic(model1)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary(model1)
BIC(model1)
# Model 2
model2 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset + socio_economic_class:Dataset , data = data)
summary(model2)
BIC(model2)
# Model 1
model1 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset, data = data)
summary(model1)
AIC(model1)
# Model 2
model2 <- lm(age_first_child_numeric ~ socio_economic_class + Dataset + socio_economic_class:Dataset , data = data)
summary(model2)
AIC(model2)
# extract coefficients from first model using 'coef()'
coef1 = coef(model1)
# extract coefficients from second model
coef2 = coef(model2)
# extract standard errors from first model using 'se.coef()'
se.coef1 = se.coef(model1)
install.packages("arm", "jtools")
